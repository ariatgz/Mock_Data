Purpose of the Function
The function updates an array of average temperatures (temp_average) for multiple multiplexers (MUXes) by incorporating a new temperature sample (temp_snapshot) into a sliding window of samples. The sliding window keeps a record of the last NUM_SAMPLES temperature readings for each MUX, which are stored in temp_data. This is essentially a moving average where the oldest sample is replaced with the newest one.

Inputs
temp_average:

This is an array that holds the current average temperatures for each MUX.
It's modified during the function to account for the new sample.
temp_snapshot:

This is an array that holds the latest temperature data sampled from each MUX.
The size of this array is NUM_MUX (the number of multiplexers being monitored).
temp_data:

This is a 2D array of size [NUM_SAMPLES][NUM_MUX], where each row holds temperature data for each MUX from previous samples.
Each column corresponds to a specific MUX, and each row corresponds to a specific sample in time (like a history of temperatures).
It holds the sliding window of temperature samples.
Outputs
temp_average (updated):

This array is updated with the new average temperature for each MUX, after including the new sample and removing the effect of the oldest sample.
temp_data (modified):

The oldest temperature sample in temp_data is replaced by the new sample from temp_snapshot.
Detailed Explanation of the Code
c
Copy code
static uint32_t rear = 0;
rear is a static variable that keeps track of where the next sample will be written in the temp_data array.
Being static means that its value persists across multiple function calls. It starts at 0 and will be incremented each time enqueue is called.
c
Copy code
rear = (rear + 1) % NUM_SAMPLES;
This is a circular buffer mechanism. It increments the rear index to point to the next position in the temp_data array where the new sample will be written.
The modulo operation (% NUM_SAMPLES) ensures that when rear reaches the end of the array (NUM_SAMPLES), it wraps back around to the start (index 0).
c
Copy code
for (uint8_t i = 0U; i < NUM_MUX; ++i) {
This for loop iterates over each MUX (from 0 to NUM_MUX - 1). The loop ensures that the temperature for each MUX is updated independently.
c
Copy code
temp_average[i] -= temp_data[rear][i] / NUM_SAMPLES;
The current sample at position rear for the ith MUX is removed from the running average.
Since we're calculating a moving average, the contribution of the oldest sample needs to be removed. Each sample contributes equally to the average, so the current sample’s contribution to the average is temp_data[rear][i] / NUM_SAMPLES.
c
Copy code
temp_data[rear][i] = temp_snapshot[i];
The oldest sample in temp_data is overwritten with the new sample from temp_snapshot.
This step replaces the temperature value for the ith MUX at position rear in the temp_data array.
c
Copy code
temp_average[i] += temp_data[rear][i] / NUM_SAMPLES;
Now the new sample is added to the running average for the ith MUX.
The new sample's contribution to the average is also temp_data[rear][i] / NUM_SAMPLES, just like how the oldest sample's contribution was removed earlier.
c
Copy code
return;
The function completes its task of updating the moving average and the temperature data buffer, and control is returned to the calling function.
Circular Buffer Concept
The function uses a circular buffer to manage the temp_data array:

Circular Buffer: The buffer stores a fixed number of temperature samples (the past NUM_SAMPLES readings) for each MUX. When the buffer is full, the oldest sample is replaced by the new one.
This is efficient because it only requires a small, fixed amount of memory (the NUM_SAMPLES * NUM_MUX array), and it keeps the most recent temperature data without growing indefinitely.
Example Scenario
Let’s consider an example with NUM_MUX = 2 (two MUXes) and NUM_SAMPLES = 3 (three past temperature samples):

Initial state:

temp_average = [30, 25] (Average temperatures of MUX1 and MUX2).
temp_data = [[28, 24], [32, 25], [30, 26]] (Samples over 3 time points).
rear = 0 (Points to the oldest sample in temp_data).
New sample arrives:

temp_snapshot = [31, 27] (New temperature readings for MUX1 and MUX2).
What happens inside the function:

The function moves rear to the next index, which is 1 (rear = (0 + 1) % 3 = 1).
The old sample temp_data[1] = [32, 25] is removed from the average:
temp_average[0] -= 32 / 3 → temp_average[0] = 30 - 10.67 = 19.33
temp_average[1] -= 25 / 3 → temp_average[1] = 25 - 8.33 = 16.67
The new sample is added to temp_data[1] = [31, 27].
The new sample’s contribution is added to the average:
temp_average[0] += 31 / 3 → temp_average[0] = 19.33 + 10.33 = 29.66
temp_average[1] += 27 / 3 → temp_average[1] = 16.67 + 9 = 25.67
Now, the updated state would be:

temp_average = [29.66, 25.67].
temp_data = [[28, 24], [31, 27], [30, 26]].
Summary
Circular Buffer: Efficiently stores the last NUM_SAMPLES temperature readings and overwrites the oldest data with the newest.
Running Average: The function updates the average temperature of each MUX by subtracting the contribution of the oldest sample and adding the contribution of the newest sample.
